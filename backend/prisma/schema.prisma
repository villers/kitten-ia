// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kittens   Kitten[]
}

model Kitten {
  id           String        @id @default(uuid())
  name         String
  level        Int           @default(1)
  experience   Int           @default(0)
  strength     Int           @default(5)
  agility      Int           @default(5)
  constitution Int           @default(5)
  intelligence Int           @default(5)
  skillPoints  Int           @default(0)
  avatarUrl    String?
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  abilities    Ability[]
  stats        KittenStats?
  battleLogs   BattleLog[]   @relation("Challenger")
  opponentLogs BattleLog[]   @relation("Opponent")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model KittenStats {
  id             String   @id @default(uuid())
  wins           Int      @default(0)
  losses         Int      @default(0)
  draws          Int      @default(0)
  kittenId       String   @unique
  kitten         Kitten   @relation(fields: [kittenId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Ability {
  id          String        @id @default(uuid())
  name        String
  description String
  type        AbilityType
  power       Int
  accuracy    Int
  cooldown    Int           @default(0)
  kittenId    String
  kitten      Kitten        @relation(fields: [kittenId], references: [id])
  battleMoves BattleMove[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model BattleLog {
  id             String       @id @default(uuid())
  challengerId   String
  challenger     Kitten       @relation("Challenger", fields: [challengerId], references: [id])
  opponentId     String
  opponent       Kitten       @relation("Opponent", fields: [opponentId], references: [id])
  winnerId       String?
  battleMoves    BattleMove[]
  status         BattleStatus @default(PENDING)
  seed           Int
  replayData     Json
  totalRounds    Int
  currentRound   Int          @default(0)
  experienceGain Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model BattleMove {
  id          String    @id @default(uuid())
  round       Int
  kittenId    String
  abilityId   String
  ability     Ability   @relation(fields: [abilityId], references: [id])
  damage      Int
  isSuccess   Boolean
  isCritical  Boolean   @default(false)
  battleLogId String
  battleLog   BattleLog @relation(fields: [battleLogId], references: [id])
  createdAt   DateTime  @default(now())
}

enum AbilityType {
  ATTACK
  DEFENSE
  SPECIAL
  HEAL
  BUFF
  DEBUFF
}

enum BattleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
